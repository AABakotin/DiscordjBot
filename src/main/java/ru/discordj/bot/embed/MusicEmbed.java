package ru.discordj.bot.embed;

import com.sedmelluq.discord.lavaplayer.track.AudioTrack;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.utils.messages.MessageCreateBuilder;
import ru.discordj.bot.lavaplayer.PlayerManager;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;



public class MusicEmbed extends BaseEmbed {
    private static final int PROGRESS_BAR_LENGTH = 20;
    private static final String PROGRESS_START = "‚îÉ";
    private static final String PROGRESS_END = "‚îÉ";
    private static final String PROGRESS_LINE = "‚îÅ";
    private static final String PROGRESS_CURRENT = "‚ö°";
    private static final String EMOJI_MUSIC = "üéß";
    private static final String EMOJI_QUEUE = "üìã";
    private static final String EMOJI_DURATION = "‚è±Ô∏è";
    private static final String EMOJI_AUTHOR = "üë§";
    private static final String EMOJI_LINK = "üåê";
    private static final String EMOJI_PLAYING = "‚ñ∂Ô∏è";
    private static final String EMOJI_WARNING = "‚ö†Ô∏è";
    private static final String EMOJI_PAUSED = "‚è∏Ô∏è";
    private static final String EMOJI_STOP = "‚èπÔ∏è";
    private static final String EMOJI_REPEAT = "üîÅ";
    private static final String EMOJI_SKIP = "‚è≠Ô∏è";

    public void updatePlayerMessage(TextChannel textChannel, String messageId) {
        if (messageId == null) return;
        
        textChannel.retrieveMessageById(messageId)
            .queue(message -> {
                MessageCreateBuilder newMessage = createPlayerMessage(textChannel);
                message.editMessageEmbeds(newMessage.getEmbeds())
                    .setComponents(newMessage.getComponents())
                    .queue(null, error -> {
                        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        textChannel.sendMessage(newMessage.build())
                            .queue(msg -> {
                                PlayerManager.getInstance()
                                    .getGuildMusicManager(textChannel.getGuild())
                                    .getTrackScheduler()
                                    .setPlayerMessage(textChannel, msg.getId());
                            });
                    });
            }, error -> {
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                MessageCreateBuilder newMessage = createPlayerMessage(textChannel);
                textChannel.sendMessage(newMessage.build())
                    .queue(msg -> {
                        PlayerManager.getInstance()
                            .getGuildMusicManager(textChannel.getGuild())
                            .getTrackScheduler()
                            .setPlayerMessage(textChannel, msg.getId());
                    });
            });
    }

    public MessageCreateBuilder createPlayerMessage(TextChannel textChannel) {
        MessageCreateBuilder messageBuilder = new MessageCreateBuilder();
        EmbedBuilder embed = createDefaultBuilder();

        AudioTrack currentTrack = PlayerManager.getInstance()
            .getGuildMusicManager(textChannel.getGuild())
            .getPlayer()
            .getPlayingTrack();

        if (currentTrack == null) {
            embed.setColor(Color.decode("#2f3136"))
                .setTitle(EMOJI_MUSIC + " –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
                .setDescription(EMOJI_WARNING + " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/play` —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É");
        } else {
            String thumbnailUrl = "https://img.youtube.com/vi/" + currentTrack.getIdentifier() + "/default.jpg";
            
            // –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            String timeDisplay;
            if (currentTrack.getDuration() > 86400000) { // –ë–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ (—Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏)
                timeDisplay = "`" + formatTime(currentTrack.getPosition()) + "`";
            } else {
                timeDisplay = "`" + formatTime(currentTrack.getPosition()) + " / " + formatTime(currentTrack.getDuration()) + "`";
            }
            
            embed.setColor(Color.decode("#5865F2"))
                .setDescription("**" + currentTrack.getInfo().title + "**\n" +
                              createProgressBar(currentTrack))
                .setThumbnail(thumbnailUrl)
                .addField(EMOJI_DURATION + " –í—Ä–µ–º—è", timeDisplay, true)
                .addField(EMOJI_AUTHOR + " –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", 
                    "`" + currentTrack.getInfo().author + "`", true)
                .setFooter(EMOJI_LINK + " –ò—Å—Ç–æ—á–Ω–∏–∫ ‚Ä¢ " + currentTrack.getInfo().uri);

            addQueueInfo(embed, textChannel, messageBuilder);
        }

        messageBuilder.setEmbeds(embed.build());
        addControlButtons(messageBuilder, textChannel);
        return messageBuilder;
    }

    private void addQueueInfo(EmbedBuilder embed, TextChannel textChannel, MessageCreateBuilder messageBuilder) {
        Queue<AudioTrack> queue = PlayerManager.getInstance()
            .getGuildMusicManager(textChannel.getGuild())
            .getTrackScheduler()
            .getQueue();

        if (!queue.isEmpty()) {
            StringBuilder queueText = new StringBuilder();
            int trackCount = 0;

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
            for (AudioTrack track : queue) {
                trackCount++;
                String trackTitle = track.getInfo().title;
                if (trackTitle.length() > 50) {
                    trackTitle = trackTitle.substring(0, 47) + "...";
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–∫–æ–≤ –∫–æ—Ä–æ—á–µ 24 —á–∞—Å–æ–≤
                String durationStr = "";
                if (track.getDuration() <= 86400000) { // –ú–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤
                    durationStr = " (" + formatTime(track.getDuration()) + ")";
                }
                
                queueText.append(trackCount)
                    .append(". ")
                    .append(trackTitle)
                    .append(durationStr)
                    .append("\n");
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
            embed.addField(EMOJI_QUEUE + " –í –æ—á–µ—Ä–µ–¥–∏:", queueText.toString(), false);
        }
    }

    private void addControlButtons(MessageCreateBuilder messageBuilder, TextChannel textChannel) {
        var guildManager = PlayerManager.getInstance().getGuildMusicManager(textChannel.getGuild());
        boolean isPlaying = guildManager.getPlayer().getPlayingTrack() != null;
        boolean isPaused = guildManager.getPlayer().isPaused();
        boolean isRepeat = guildManager.getTrackScheduler().isRepeat();
        
        List<Button> buttons = new ArrayList<>();
        buttons.add(Button.primary("play_pause", isPaused ? EMOJI_PLAYING : EMOJI_PAUSED));
        buttons.add(Button.danger("stop", EMOJI_STOP));
        buttons.add(Button.success("repeat", isRepeat ? EMOJI_REPEAT : "‚û°"));
        
        if (!guildManager.getTrackScheduler().getQueue().isEmpty()) {
            buttons.add(Button.primary("skip", EMOJI_SKIP));
        }
        
        if (isPlaying) {
            messageBuilder.setActionRow(buttons);
        }
    }

    private String createProgressBar(AudioTrack track) {
        long duration = track.getDuration();
        long position = track.getPosition();
        
        // –î–ª—è —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π –∏ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ (–±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤)
        // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ
        if (duration > 86400000) { // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            int progressIndex = (int) ((position / 1000) % PROGRESS_BAR_LENGTH); // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
            
            StringBuilder progressBar = new StringBuilder(PROGRESS_START);
            for (int i = 0; i < PROGRESS_BAR_LENGTH; i++) {
                if (i == progressIndex) {
                    progressBar.append(PROGRESS_CURRENT);
                } else {
                    progressBar.append(PROGRESS_LINE);
                }
            }
            progressBar.append(PROGRESS_END);
            return "\n" + progressBar.toString();
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        int progressFilled = (int) ((position * PROGRESS_BAR_LENGTH) / duration);
        
        StringBuilder progressBar = new StringBuilder(PROGRESS_START);
        for (int i = 0; i < PROGRESS_BAR_LENGTH; i++) {
            if (i == progressFilled) {
                progressBar.append(PROGRESS_CURRENT);
            } else {
                progressBar.append(PROGRESS_LINE);
            }
        }
        progressBar.append(PROGRESS_END);
        return "\n" + progressBar.toString();
    }

    private String formatTime(long milliseconds) {
        long seconds = milliseconds / 1000;
        long hours = seconds / 3600;
        seconds %= 3600;
        long minutes = seconds / 60;
        seconds %= 60;
        
        if (hours > 0) {
            return String.format("%d:%02d:%02d", hours, minutes, seconds);
        } else {
            return String.format("%02d:%02d", minutes, seconds);
        }
    }
} 