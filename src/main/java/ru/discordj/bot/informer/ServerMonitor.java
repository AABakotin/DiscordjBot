package ru.discordj.bot.informer;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.discordj.bot.config.JdaConfig;
import ru.discordj.bot.informer.parser.Parser;
import ru.discordj.bot.utility.pojo.Root;
import ru.discordj.bot.utility.pojo.ServerInfo;

import java.awt.Color;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class ServerMonitor {
    private static final Logger logger = LoggerFactory.getLogger(ServerMonitor.class);
    private static ServerMonitor instance;

    private ScheduledExecutorService scheduler;
    private Root config;
    private final Parser parser;
    private Map<String, String> messageIds = new HashMap<>();
    private boolean isRunning = false;
    private Thread monitoringThread;

    private static final Map<String, String> IP_REGIONS = new HashMap<>();

    static {
        // –†–æ—Å—Å–∏–π—Å–∫–∏–µ IP –¥–∏–∞ÔøΩÔøΩ–∞–∑–æ–Ω—ã (–ø—Ä–∏–º–µ—Ä—ã)
        IP_REGIONS.put("195.18.", "ru");
        IP_REGIONS.put("185.189.", "ru");
        IP_REGIONS.put("62.122.", "ru");
        IP_REGIONS.put("51.79.", "sg"); // –°–∏–Ω–≥–∞–ø—É—Ä
        IP_REGIONS.put("51.161.", "ca"); // –ö–∞–Ω–∞–¥–∞
    }

    public static ServerMonitor getInstance() {
        return instance;
    }

    public ServerMonitor(Root config) {
        this.config = config;
        this.parser = new Parser();
        instance = this;
    }

    public void start() {
        if (!isRunning) {
            scheduler = Executors.newSingleThreadScheduledExecutor(r -> {
                monitoringThread = new Thread(r, "MonitoringThread");
                return monitoringThread;
            });
            scheduler.scheduleAtFixedRate(this::updateServersStatus, 0, 5, TimeUnit.SECONDS);
            isRunning = true;
            logger.info("Server monitoring started");
        }
    }

    public void stop() {
        if (isRunning) {
            try {
                scheduler.shutdownNow();
                if (!scheduler.awaitTermination(2, TimeUnit.SECONDS)) {
                    if (monitoringThread != null) {
                        monitoringThread.interrupt();
                    }
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            } finally {
                isRunning = false;
                messageIds.clear();
                instance = null;
                scheduler = null;
                monitoringThread = null;
                logger.info("Server monitoring forcefully stopped");
            }
        }
    }

    public boolean isRunning() {
        return isRunning;
    }

    private void updateServersStatus() {
        if (Thread.currentThread().isInterrupted()) {
            logger.info("Monitoring thread interrupted, stopping...");
            return;
        }
        
        if (config.getMonitoringChannelId() == null || config.getServers().isEmpty()) {
            return;
        }

        TextChannel channel = JdaConfig.getJda().getTextChannelById(config.getMonitoringChannelId());
        if (channel == null) return;

        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (messageIds.isEmpty()) {
            channel.getIterableHistory()
                .takeAsync(100)
                .thenAccept(messages -> {
                    messages.stream()
                        .filter(m -> m.getAuthor().equals(JdaConfig.getJda().getSelfUser()))
                        .forEach(m -> m.delete().queue());
                    logger.info("Deleted old bot messages from channel");
                });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
        for (ServerInfo server : config.getServers()) {
            Map<String, String> serverInfo = new HashMap<>();
            EmbedBuilder embed = new EmbedBuilder()
                .setTitle("üéÆ –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
                .setColor(getStatusColor(serverInfo))
                .setTimestamp(Instant.now());

            try {
                serverInfo = parser.getServerInfo(server.getIp(), server.getPort());
                if (!serverInfo.isEmpty()) {
                    String[] players = serverInfo.get("players").split("/");
                    int current = Integer.parseInt(players[0]);
                    int max = Integer.parseInt(players[1]);
                    
                    embed.setDescription("**" + serverInfo.get("name") + "**")
                        .addField("üìä –°—Ç–∞—Ç—É—Å", "üü¢ –û–Ω–ª–∞–π–Ω", true)
                        .addField("üåç –†–µ–≥–∏–æ–Ω", getRegionFlag(server.getIp()), true)
                        .addField("üé≤ –ò–≥—Ä–∞", server.getGame().toUpperCase(), true)
                        .addField("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", String.format("`%s:%d`", server.getIp(), server.getPort()), true)
                        .addField("üó∫Ô∏è –ö–∞—Ä—Ç–∞", serverInfo.get("map"), true)
                        .addField("üë• –ò–≥—Ä–æ–∫–∏", String.format("%d/%d %s", 
                            current, max, 
                            getProgressBar(current, max)), false);

                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if (serverInfo.containsKey("version")) {
                        embed.addField("üìå –í–µ—Ä—Å–∏—è", serverInfo.get("version"), true);
                    }
                    if (serverInfo.containsKey("mode")) {
                        embed.addField("üéØ –†–µ–∂–∏–º", serverInfo.get("mode"), true);
                    }
                } else {
                    embed.setDescription("**" + server.getName() + "**")
                        .addField("üìä –°—Ç–∞—Ç—É—Å", "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω", true)
                        .addField("üåç –†–µ–≥–∏–æ–Ω", getRegionFlag(server.getIp()), true)
                        .addField("üé≤ –ò–≥—Ä–∞", server.getGame().toUpperCase(), true)
                        .addField("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", String.format("`%s:%d`", server.getIp(), server.getPort()), true);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–≤–∞–ª —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                embed.setFooter("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", null);

            } catch (Exception e) {
                embed.setDescription("**" + server.getName() + "**")
                    .addField("üìä –°—Ç–∞—Ç—É—Å", "‚ö†Ô∏è –û—à–∏–±–∫–∞", true)
                    .addField("üåç –†–µ–≥–∏–æ–Ω", getRegionFlag(server.getIp()), true)
                    .addField("üé≤ –ò–≥—Ä–∞", server.getGame().toUpperCase(), true)
                    .addField("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", String.format("`%s:%d`", server.getIp(), server.getPort()), true)
                    .addField("‚ùå –û—à–∏–±–∫–∞", e.getMessage(), false);
            }

            String serverId = server.getIp() + ":" + server.getPort();
            String messageId = messageIds.get(serverId);

            if (messageId == null) {
                // –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                channel.sendMessageEmbeds(embed.build())
                    .queue(message -> messageIds.put(serverId, message.getId()));
            } else {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                channel.editMessageEmbedsById(messageId, embed.build())
                    .queue(null, error -> {
                        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                        channel.sendMessageEmbeds(embed.build())
                            .queue(message -> messageIds.put(serverId, message.getId()));
                    });
            }
        }
    }

    private Color getStatusColor(Map<String, String> serverInfo) {
        if (serverInfo.isEmpty()) {
            return Color.RED; // –û—Ñ—Ñ–ª–∞–π–Ω
        }
        String[] players = serverInfo.get("players").split("/");
        int current = Integer.parseInt(players[0]);
        int max = Integer.parseInt(players[1]);
        
        if (current >= max) {
            return Color.decode("#ff5555"); // –°–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω—ã–π
        } else if (current >= max * 0.7) {
            return Color.decode("#ffaa00"); // –°–µ—Ä–≤–µ—Ä –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–π
        } else {
            return Color.decode("#55ff55"); // –ï—Å—Ç—å –º–µ—Å—Ç–∞
        }
    }

    private String getProgressBar(int current, int max) {
        int bars = 10;
        int filled = (int) Math.round((double) current / max * bars);
        
        StringBuilder sb = new StringBuilder("[");
        for (int i = 0; i < bars; i++) {
            if (i < filled) {
                sb.append("‚ñà");
            } else {
                sb.append("‚ñë");
            }
        }
        sb.append("]");
        return sb.toString();
    }

    private String getRegionFlag(String ip) {
        return IP_REGIONS.entrySet().stream()
            .filter(entry -> ip.startsWith(entry.getKey()))
            .map(Map.Entry::getValue)
            .findFirst()
            .map(code -> ":flag_" + code + ":")
            .orElse(":flag_white:"); // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
    }

    public void updateConfig(Root newConfig) {
        this.config = newConfig;
    }
} 