package ru.discordj.bot.events.slashcommands;

import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.OptionData;
import ru.discordj.bot.events.ICommand;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Slash-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.
 * –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.
 */
public class RadioRemoveSlashCommand implements ICommand {
    
    @Override
    public String getName() {
        return "radio_remove";
    }
    
    @Override
    public String getDescription() {
        return "–£–¥–∞–ª–∏—Ç—å —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞";
    }
    
    @Override
    public List<OptionData> getOptions() {
        List<OptionData> options = new ArrayList<>();
        options.add(new OptionData(OptionType.STRING, "name", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", true));
        return options;
    }
    
    @Override
    public void execute(SlashCommandInteractionEvent event) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (!event.getMember().hasPermission(Permission.ADMINISTRATOR)) {
            event.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞.")
                .setEphemeral(true)
                .queue(response -> {
                    response.deleteOriginal().queueAfter(10, TimeUnit.SECONDS);
                });
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        String stationName = event.getOption("name").getAsString();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            if (!RadioSlashCommand.hasStation(stationName)) {
                event.reply("‚ùå –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º **" + stationName + "** –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                    .setEphemeral(true)
                    .queue();
                return;
            }
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            int previousCount = RadioSlashCommand.getStationsCount();
            
            // –£–¥–∞–ª—è–µ–º —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—é
            RadioSlashCommand.removeRadioStation(stationName);
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
            int newCount = RadioSlashCommand.getStationsCount();
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            StringBuilder successMessage = new StringBuilder();
            successMessage.append("‚úÖ –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è **").append(stationName).append("** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n");
            successMessage.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n");
            successMessage.append("‚Ä¢ –ë—ã–ª–æ: ").append(previousCount).append(" —Å—Ç–∞–Ω—Ü–∏–π\n");
            successMessage.append("‚Ä¢ –°—Ç–∞–ª–æ: ").append(newCount).append(" —Å—Ç–∞–Ω—Ü–∏–π");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            event.reply(successMessage.toString())
                .setEphemeral(true)
                .queue();
            
        } catch (Exception e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
            System.err.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: " + e.getMessage());
            e.printStackTrace();
            
            event.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏: " + e.getMessage())
                .setEphemeral(true)
                .queue();
        }
    }
} 