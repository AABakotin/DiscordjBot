package ru.discordj.bot.events.slashcommands;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.StringSelectInteractionEvent;
import net.dv8tion.jda.api.interactions.commands.build.OptionData;
import ru.discordj.bot.events.ICommand;
import ru.discordj.bot.utility.JsonParse;
import ru.discordj.bot.utility.pojo.RadioStation;
import ru.discordj.bot.utility.pojo.ServerRules;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

/**
 * Slash-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π.
 */
public class RadioListSlashCommand implements ICommand {
    
    @Override
    public String getName() {
        return "radio_list";
    }
    
    @Override
    public String getDescription() {
        return "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π";
    }
    
    @Override
    public List<OptionData> getOptions() {
        // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–º–µ–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        return new ArrayList<>();
    }
    
    @Override
    public void execute(SlashCommandInteractionEvent event) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏
            ServerRules guildConfig = JsonParse.getInstance().read(event.getGuild());
            List<RadioStation> stations = guildConfig.getRadioStations();
            
            if (stations.isEmpty()) {
                event.reply("‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/radio_add`")
                    .setEphemeral(true)
                    .queue(response -> response.deleteOriginal().queueAfter(30, TimeUnit.SECONDS));
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —ç–º–±–µ–¥ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç–∞–Ω—Ü–∏–π
            EmbedBuilder embed = new EmbedBuilder()
                .setTitle("üìª –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π")
                .setColor(Color.decode("#9370DB")) // –ú–µ–¥–∏—É–º –ø—É—Ä–ø—É—Ä–Ω—ã–π —Ü–≤–µ—Ç
                .setDescription("–î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/radio name:–Ω–∞–∑–≤–∞–Ω–∏–µ`\n")
                .setFooter("–í—Å–µ–≥–æ —Å—Ç–∞–Ω—Ü–∏–π: " + stations.size() + " | –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫: /radio_reload");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
            for (int i = 0; i < stations.size(); i++) {
                RadioStation station = stations.get(i);
                embed.appendDescription(String.format("\n**%d.** %s", i + 1, station.getName()));
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥
            event.replyEmbeds(embed.build())
                .setEphemeral(true) // –í–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                .queue();
            
        } catch (Exception e) {
            event.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage())
                .setEphemeral(true)
                .queue(response -> response.deleteOriginal().queueAfter(10, TimeUnit.SECONDS));
        }
    }
    
    @Override
    public void onStringSelectInteraction(StringSelectInteractionEvent event) {
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    }
} 