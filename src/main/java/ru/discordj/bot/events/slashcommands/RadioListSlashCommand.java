package ru.discordj.bot.events.slashcommands;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.interactions.commands.build.OptionData;
import ru.discordj.bot.events.ICommand;

import java.awt.Color;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Slash-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π.
 */
public class RadioListSlashCommand implements ICommand {
    
    @Override
    public String getName() {
        return "radio_list";
    }
    
    @Override
    public String getDescription() {
        return "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π";
    }
    
    @Override
    public List<OptionData> getOptions() {
        return Collections.emptyList();
    }
    
    @Override
    public void execute(SlashCommandInteractionEvent event) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            Map<String, List<RadioSlashCommand.RadioStation>> stationsByCategory = 
                RadioSlashCommand.getStationsByCategory();
            
            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if (stationsByCategory.isEmpty()) {
                event.reply("‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π –ø—É—Å—Ç!")
                    .setEphemeral(true)
                    .queue();
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è—Ö
            EmbedBuilder embed = new EmbedBuilder();
            embed.setTitle("üìª –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π");
            embed.setColor(Color.BLUE);
            embed.setDescription("–í—Å–µ–≥–æ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π: " + RadioSlashCommand.getStationsCount() + 
                                "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/radio` –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π
            for (Map.Entry<String, List<RadioSlashCommand.RadioStation>> entry : stationsByCategory.entrySet()) {
                String category = entry.getKey();
                List<RadioSlashCommand.RadioStation> stations = entry.getValue();
                
                // –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                String stationsList = stations.stream()
                    .map(station -> "‚Ä¢ " + station.getName())
                    .collect(Collectors.joining("\n"));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
                embed.addField("üè∑Ô∏è " + category + " (" + stations.size() + ")", 
                              stationsList, 
                              true);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
            embed.setFooter("üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /radio_add –∏ /radio_remove");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–±–µ–¥
            event.replyEmbeds(embed.build())
                .queue();
            
        } catch (Exception e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π: " + e.getMessage());
            e.printStackTrace();
            
            event.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–π: " + e.getMessage())
                .setEphemeral(true)
                .queue();
        }
    }
} 